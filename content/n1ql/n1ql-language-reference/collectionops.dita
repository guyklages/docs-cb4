<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept
  PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="topic_7_1" xtrc="/w:document/w:body[1]/w:p[627]" xml:lang="en-US">
	<title>Collection Operators</title>
	<conbody xtrc="/w:document/w:body[1]/w:p[628]">
		<p>Collection operators enable you to evaluate expressions over collections or objects. The
			operators include <codeph>ANY</codeph>, <codeph>EVERY</codeph>, <codeph>ARRAY</codeph>,
				<codeph>FIRST</codeph>, <codeph>EXISTS</codeph>, <codeph>IN</codeph> and
				<codeph>WITHIN</codeph>.</p>

		<codeblock>exists-expression | in-expression | within-expression | ANY | EVERY | ARRAY | FIRST</codeblock>

		<section id="collection-op-any"
					><title>ANY</title><codeblock> ANY <varname>variable1</varname> ( IN | WITHIN ) <varname>expression1</varname> 
 [ , <varname>variable2</varname> ( IN | WITHIN ) <varname>expression2</varname>  ] * 
 SATISFIES <varname>condition1</varname> END </codeblock><p><codeph>ANY
				</codeph>is a range predicate that tests a Boolean condition over the elements or
				attributes of a collection, object, or objects. </p><p><codeph>IN
					</codeph>and<codeph> WITHIN </codeph>operators range through the
					collection.<codeph> IN </codeph>includes only the current level of the
				collection; whereas,<codeph> WITHIN </codeph>includes all sub-levels, child, and
				descendants of the collection.</p><p><codeph>SATISFIES </codeph>is used to specify
				the filter condition. The expression after the ANY clause allows us to assign an
				identifier to an element in the array that we are searching through. </p><p>If at
				least one item in the array satisfies the<codeph> ANY </codeph>expression, then it
					returns<codeph> true</codeph>. Otherwise, it returns<codeph>
					false</codeph>.</p><p><b>Example 1</b>: Retrieve all contacts who have one or
				more children over the age of
			14.</p><codeblock spectitle="Query:">   SELECT name
     FROM contacts
WHERE ANY child
       IN children
SATISFIES child.age > 14 END    </codeblock>This
			query returns one item, because one of his children is
					17.<codeblock spectitle="Result:">"results": [ { "name": "dave" }, .... ]</codeblock><p><b>Example
					2</b>: Retrieve all contacts who have one or more children over the age of 10
				and are in arrays nested inside the document.
			</p><codeblock spectitle="Query:">   SELECT fname, children
     FROM tutorial 
WHERE ANY child
       IN tutorial.children
SATISFIES child.age > 10  END</codeblock>This
			query returns three
				items.<codeblock spectitle="Result:">{"results":[
  {"children":[{"age":17,"fname":"Aiden","gender":"m"},{"age":2,"fname":"Bill","gender":"f"}],"fname":"Dave"},
  {"children":[{"age":17,"fname":"Xena","gender":"f"},{"age":2,"fname":"Yuri","gender":"m"}],"fname":"Earl"},
  {"children":[{"age":17,"fname":"Abama","gender":"m"},{"age":21,"fname":"Bebama","gender":"m"}],"fname":"Ian"}
]}</codeblock><note>The
				SOME and ANY operators perform the same function and can be used interchangeably.
			</note></section>

		<section id="collection-op-every"
					><title>EVERY</title><codeblock>EVERY <varname>variable</varname> ( IN | WITHIN ) <varname>expression</varname> 
   [  ,  <varname>variable</varname> ( IN | WITHIN ) <varname>expression</varname> ] * 
   SATISFIES <varname>condition</varname>  END   </codeblock><p><codeph>EVERY
				</codeph>is a range predicate that tests a Boolean condition over the elements or
				attributes of a collection, object, or objects. </p><p><codeph>IN
					</codeph>and<codeph> WITHIN </codeph>operators range through the
					collection.<codeph> IN </codeph>includes only the current level of the
				collection; whereas,<codeph> WITHIN </codeph>includes all sub-levels, child, and
				descendants of the collection.</p><p><codeph>SATISFIES </codeph>is used to specify
				the filter condition. The expression after the ANY clause allows us to assign an
				identifier to an element in the array that we are searching through. </p><p>If every
				array element satisfies the<codeph> EVERY </codeph><varname>expression</varname>, it
					returns<codeph> true</codeph>. Otherwise, it returns<codeph> false</codeph>.
				</p><p>If the array is empty, it returns<codeph> true</codeph>. </p><p>The EVERY
				operator returns<codeph> true </codeph>if all items meet the
					<varname>condition</varname>.</p><p><b>Example 1b</b>: Same as Example 1,
					except<codeph> EVERY </codeph>is used instead of <codeph>ANY</codeph>. This
				query scans all contacts and returns the name of  contacts who children are all over
				the age of 10.
			</p><codeblock spectitle="Query:">     SELECT name
       FROM contacts
WHERE EVERY child
         IN children
  SATISFIES child.age > 10 END</codeblock>The
			result tells us that out of all of the contacts, only "ian" has children who are all
			over the age 10.
					<codeblock spectitle="Result:">  { "name": "ian" }</codeblock><p><b>Example
					2b</b>: Same as Example 2, except EVERY is used instead of ANY. Retrieve all
				contacts who have children all over the age of 10 and are in arrays nested inside
				the document.
			</p><codeblock spectitle="Query:">     SELECT fname, children
       FROM tutorial 
WHERE EVERY child 
         IN tutorial.children 
  SATISFIES child.age > 10  END    </codeblock>This
			query returns only one
			item.<codeblock spectitle="Result:">{"results":[
   {"children":[{"age":17,"fname":"Abama","gender":"m"},{"age":21,"fname":"Bebama","gender":"m"}],"fname":"Ian"}]}</codeblock></section>

		<section id="collection-op-array">
			<title>ARRAY</title>
			<codeblock>ARRAY <varname>expressionA</varname> FOR <varname>variable1</varname> ( IN | WITHIN ) <varname>expression1</varname>
                   [ ,  <varname>variable2</varname> ( IN | WITHIN ) <varname>expression2</varname> ] * 
                   [ ( WHEN  <varname>condition1</varname>) ] END</codeblock>
			<p>The ARRAY operator lets you map and filter the elements or attributes of a collection, object,
				or objects. </p>
			<p>It evaluates to an array of the operand expression, that satisfies the WHEN clause,
				if provided. </p>
		</section>

		<section>
			<title>FIRST</title>
			<codeblock>FIRST <varname>expressionA</varname> FOR <varname>variable1</varname> ( IN | WITHIN ) <varname>expression1</varname>
                    [ , <varname>variable2</varname> ( IN | WITHIN ) <varname>expression2</varname> ] * 
                    [ ( WHEN  <varname>condition1</varname>) ] END</codeblock>

			<p>The FIRST operator enables you to map and filter the elements or attributes of a collection, object, or objects. It evaluates to a single element based on the operand expression that satisfies the WHEN clause, if provided.</p>

		</section>

		<section id="collection-op-exists">
			<title>EXISTS</title>
			<p>
				<i>exists-expression:</i>
			</p>
			<codeblock>EXISTS expression</codeblock>

			<p>The EXISTS operator evaluates to TRUE if the value is an array and contains at least one
				element.</p>

		</section>

		<section id="collection-op-in">
			<title>IN</title>
			<p>
				<i>in-expression:</i>
			</p>
			<codeblock>expression [ NOT ] IN expression</codeblock>

			<p>The IN operator evaluates to TRUE if the right-side value is an array and directly contains
				the left-side value. The NOT IN operator evaluates to TRUE if the right-side value
				is an array and does not directly contain the left-side value.</p>
		</section>

		<section id="collection-op-within">
			<title>WITHIN</title>
			<p>
				<i>within-expression:</i>
			</p>
			<codeblock>expression [NOT] WITHIN expression</codeblock>

			<p>The WITHIN operator evaluates to TRUE if the right-side value contains the left-side value as a child or descendant. The NOT WITHIN operator evaluates to TRUE if the right-side value does not contain the left-side value as a child or descendant.</p>
		</section>

	</conbody>
</concept>
